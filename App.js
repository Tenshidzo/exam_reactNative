import React, { useEffect } from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { AuthProvider } from './src/context/AuthContext';
import RootNavigator from './src/navigation/RootNavigator';
import { syncViolations, syncFromServerToLocal, isServerReachable, syncQueuedDeletions } from './src/utils/sync';
import { deleteDatabase, initDB } from './src/utils/violationStorage';
import AsyncStorage from '@react-native-async-storage/async-storage';
export default function App() {
  const initializeDatabase = async () => {
    try {
      console.log('[App] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
      await initDB();
      console.log('[App] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    } catch (e) {
      console.error('[App] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î:', e);
    }
  };
  const synchronizeData = async () => {
    try {
      const token = await AsyncStorage.getItem('token');
      if (!token) {
        console.warn('[App] –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
        return;
      }

      const serverReachable = await isServerReachable(token);
      if (!serverReachable) {
        console.warn('[App] –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
        return;
      }

      console.log('[App] üîÑ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...');
      await syncViolations();
      await  syncQueuedDeletions(token);
      console.log('[App] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (err) {
      console.error('[App] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', err);
    }
  };
  useEffect(() => {
    const start = async () => {
      await initializeDatabase();
      await synchronizeData();
    };

    start();
  }, []);
  useEffect(() => {
    const resetDB = async () => {
      try {
        await deleteDatabase();
        await new Promise(resolve => setTimeout(resolve, 500)); // –î–æ–±–∞–≤–∏–ª–∏ –∑–∞–¥–µ—Ä–∂–∫—É
        await initializeDatabase();
      } catch (e) {
        console.error('[App] –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ë–î:', e);
      }
    };
    resetDB();
  }, []);

  return (
    <AuthProvider>
      <NavigationContainer>
        <RootNavigator />
      </NavigationContainer>
    </AuthProvider>
  );
}
